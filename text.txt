const express = require('express');
const fs = require('fs');
const app = express();
const PORT = 3000;

app.use(express.json());

// CRUD operations

// Read operation - Get all data
app.get('/data', (req, res) => {
  fs.readFile('data.json', 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
      return;
    }
    res.json(JSON.parse(data));
  });
});

// Create operation - Add new data
app.post('/data', (req, res) => {
  const newData = req.body;
  fs.readFile('data.json', 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
      return;
    }
    const jsonData = JSON.parse(data);
    jsonData.push(newData);
    fs.writeFile('data.json', JSON.stringify(jsonData, null, 2), (err) => {
      if (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
        return;
      }
      res.status(201).send('Data added successfully');
    });
  });
});

// Update operation - Update existing data
app.put('/data/:id', (req, res) => {
  const { id } = req.params;
  const updatedData = req.body;
  fs.readFile('data.json', 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
      return;
    }
    const jsonData = JSON.parse(data);
    const dataIndex = jsonData.findIndex(item => item.id === parseInt(id));
    if (dataIndex === -1) {
      res.status(404).send('Data not found');
      return;
    }
    jsonData[dataIndex] = updatedData;
    fs.writeFile('data.json', JSON.stringify(jsonData, null, 2), (err) => {
      if (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
        return;
      }
      res.send('Data updated successfully');
    });
  });
});

// Delete operation - Delete data
app.delete('/data/:id', (req, res) => {
  const { id } = req.params;
  fs.readFile('data.json', 'utf8', (err, data) => {
    if (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
      return;
    }
    const jsonData = JSON.parse(data);
    const newData = jsonData.filter(item => item.id !== parseInt(id));
    if (newData.length === jsonData.length) {
      res.status(404).send('Data not found');
      return;
    }
    fs.writeFile('data.json', JSON.stringify(newData, null, 2), (err) => {
      if (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
        return;
      }
      res.send('Data deleted successfully');
    });
  });
});

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
